// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: landlords_proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "landlords_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_landlords_5fproto_2eproto() {
  delete DealCard::default_instance_;
  delete GrabLandlord::default_instance_;
  delete GrabLandlordOver::default_instance_;
  delete PlayCard::default_instance_;
  delete GameOver::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_landlords_5fproto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_landlords_5fproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DealCard::default_instance_ = new DealCard();
  GrabLandlord::default_instance_ = new GrabLandlord();
  GrabLandlordOver::default_instance_ = new GrabLandlordOver();
  PlayCard::default_instance_ = new PlayCard();
  GameOver::default_instance_ = new GameOver();
  DealCard::default_instance_->InitAsDefaultInstance();
  GrabLandlord::default_instance_->InitAsDefaultInstance();
  GrabLandlordOver::default_instance_->InitAsDefaultInstance();
  PlayCard::default_instance_->InitAsDefaultInstance();
  GameOver::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_landlords_5fproto_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_landlords_5fproto_2eproto_once_);
void protobuf_AddDesc_landlords_5fproto_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_landlords_5fproto_2eproto_once_,
                 &protobuf_AddDesc_landlords_5fproto_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_landlords_5fproto_2eproto {
  StaticDescriptorInitializer_landlords_5fproto_2eproto() {
    protobuf_AddDesc_landlords_5fproto_2eproto();
  }
} static_descriptor_initializer_landlords_5fproto_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int DealCard::kCardsFieldNumber;
const int DealCard::kExtrasFieldNumber;
const int DealCard::kCurFieldNumber;
const int DealCard::kMaxGradeFieldNumber;
#endif  // !_MSC_VER

DealCard::DealCard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DealCard::InitAsDefaultInstance() {
}

DealCard::DealCard(const DealCard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DealCard::SharedCtor() {
  _cached_size_ = 0;
  cur_ = 0;
  max_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DealCard::~DealCard() {
  SharedDtor();
}

void DealCard::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DealCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DealCard& DealCard::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_landlords_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_landlords_5fproto_2eproto();
#endif
  return *default_instance_;
}

DealCard* DealCard::default_instance_ = NULL;

DealCard* DealCard::New() const {
  return new DealCard;
}

void DealCard::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    cur_ = 0;
    max_grade_ = 0;
  }
  cards_.Clear();
  extras_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DealCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cards;
        if (input->ExpectTag(16)) goto parse_extras;
        break;
      }

      // repeated int32 extras = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extras:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_extras())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_extras())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_extras;
        if (input->ExpectTag(24)) goto parse_cur;
        break;
      }

      // required int32 cur = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_)));
          set_has_cur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_grade;
        break;
      }

      // required int32 max_grade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_grade_)));
          set_has_max_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DealCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->cards(i), output);
  }

  // repeated int32 extras = 2;
  for (int i = 0; i < this->extras_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->extras(i), output);
  }

  // required int32 cur = 3;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur(), output);
  }

  // required int32 max_grade = 4;
  if (has_max_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_grade(), output);
  }

}

int DealCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required int32 cur = 3;
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur());
    }

    // required int32 max_grade = 4;
    if (has_max_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_grade());
    }

  }
  // repeated int32 cards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  // repeated int32 extras = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->extras_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->extras(i));
    }
    total_size += 1 * this->extras_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DealCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DealCard*>(&from));
}

void DealCard::MergeFrom(const DealCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  extras_.MergeFrom(from.extras_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_cur()) {
      set_cur(from.cur());
    }
    if (from.has_max_grade()) {
      set_max_grade(from.max_grade());
    }
  }
}

void DealCard::CopyFrom(const DealCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void DealCard::Swap(DealCard* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    extras_.Swap(&other->extras_);
    std::swap(cur_, other->cur_);
    std::swap(max_grade_, other->max_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DealCard::GetTypeName() const {
  return "DealCard";
}


// ===================================================================

#ifndef _MSC_VER
const int GrabLandlord::kGradeFieldNumber;
const int GrabLandlord::kCurFieldNumber;
#endif  // !_MSC_VER

GrabLandlord::GrabLandlord()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GrabLandlord::InitAsDefaultInstance() {
}

GrabLandlord::GrabLandlord(const GrabLandlord& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GrabLandlord::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0;
  cur_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrabLandlord::~GrabLandlord() {
  SharedDtor();
}

void GrabLandlord::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GrabLandlord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GrabLandlord& GrabLandlord::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_landlords_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_landlords_5fproto_2eproto();
#endif
  return *default_instance_;
}

GrabLandlord* GrabLandlord::default_instance_ = NULL;

GrabLandlord* GrabLandlord::New() const {
  return new GrabLandlord;
}

void GrabLandlord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grade_ = 0;
    cur_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GrabLandlord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur;
        break;
      }

      // optional int32 cur = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_)));
          set_has_cur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrabLandlord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade(), output);
  }

  // optional int32 cur = 2;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur(), output);
  }

}

int GrabLandlord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional int32 cur = 2;
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrabLandlord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GrabLandlord*>(&from));
}

void GrabLandlord::MergeFrom(const GrabLandlord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_cur()) {
      set_cur(from.cur());
    }
  }
}

void GrabLandlord::CopyFrom(const GrabLandlord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrabLandlord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GrabLandlord::Swap(GrabLandlord* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(cur_, other->cur_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GrabLandlord::GetTypeName() const {
  return "GrabLandlord";
}


// ===================================================================

#ifndef _MSC_VER
const int GrabLandlordOver::kWhoFieldNumber;
const int GrabLandlordOver::kGradeFieldNumber;
#endif  // !_MSC_VER

GrabLandlordOver::GrabLandlordOver()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GrabLandlordOver::InitAsDefaultInstance() {
}

GrabLandlordOver::GrabLandlordOver(const GrabLandlordOver& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GrabLandlordOver::SharedCtor() {
  _cached_size_ = 0;
  who_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrabLandlordOver::~GrabLandlordOver() {
  SharedDtor();
}

void GrabLandlordOver::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GrabLandlordOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GrabLandlordOver& GrabLandlordOver::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_landlords_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_landlords_5fproto_2eproto();
#endif
  return *default_instance_;
}

GrabLandlordOver* GrabLandlordOver::default_instance_ = NULL;

GrabLandlordOver* GrabLandlordOver::New() const {
  return new GrabLandlordOver;
}

void GrabLandlordOver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    who_ = 0;
    grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GrabLandlordOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 who = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &who_)));
          set_has_who();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // required int32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrabLandlordOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 who = 1;
  if (has_who()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->who(), output);
  }

  // required int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }

}

int GrabLandlordOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 who = 1;
    if (has_who()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->who());
    }

    // required int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrabLandlordOver::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GrabLandlordOver*>(&from));
}

void GrabLandlordOver::MergeFrom(const GrabLandlordOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_who()) {
      set_who(from.who());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
}

void GrabLandlordOver::CopyFrom(const GrabLandlordOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrabLandlordOver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GrabLandlordOver::Swap(GrabLandlordOver* other) {
  if (other != this) {
    std::swap(who_, other->who_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GrabLandlordOver::GetTypeName() const {
  return "GrabLandlordOver";
}


// ===================================================================

#ifndef _MSC_VER
const int PlayCard::kCardsFieldNumber;
const int PlayCard::kWhoFieldNumber;
#endif  // !_MSC_VER

PlayCard::PlayCard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlayCard::InitAsDefaultInstance() {
}

PlayCard::PlayCard(const PlayCard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlayCard::SharedCtor() {
  _cached_size_ = 0;
  who_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayCard::~PlayCard() {
  SharedDtor();
}

void PlayCard::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayCard& PlayCard::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_landlords_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_landlords_5fproto_2eproto();
#endif
  return *default_instance_;
}

PlayCard* PlayCard::default_instance_ = NULL;

PlayCard* PlayCard::New() const {
  return new PlayCard;
}

void PlayCard::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    who_ = 0;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlayCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cards;
        if (input->ExpectTag(16)) goto parse_who;
        break;
      }

      // optional int32 who = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_who:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &who_)));
          set_has_who();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->cards(i), output);
  }

  // optional int32 who = 2;
  if (has_who()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->who(), output);
  }

}

int PlayCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 who = 2;
    if (has_who()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->who());
    }

  }
  // repeated int32 cards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayCard*>(&from));
}

void PlayCard::MergeFrom(const PlayCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_who()) {
      set_who(from.who());
    }
  }
}

void PlayCard::CopyFrom(const PlayCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayCard::IsInitialized() const {

  return true;
}

void PlayCard::Swap(PlayCard* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    std::swap(who_, other->who_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayCard::GetTypeName() const {
  return "PlayCard";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GameOver::GameOver()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameOver::InitAsDefaultInstance() {
}

GameOver::GameOver(const GameOver& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameOver::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameOver::~GameOver() {
  SharedDtor();
}

void GameOver::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameOver& GameOver::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_landlords_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_landlords_5fproto_2eproto();
#endif
  return *default_instance_;
}

GameOver* GameOver::default_instance_ = NULL;

GameOver* GameOver::New() const {
  return new GameOver;
}

void GameOver::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void GameOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int GameOver::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOver::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameOver*>(&from));
}

void GameOver::MergeFrom(const GameOver& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void GameOver::CopyFrom(const GameOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOver::IsInitialized() const {

  return true;
}

void GameOver::Swap(GameOver* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameOver::GetTypeName() const {
  return "GameOver";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
